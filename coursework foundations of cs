import math
import time

def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)

def mod_inv(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1

def brute_force_private_exponent(N, e, ciphertext, original_message):
    start_time = time.time()
    phi = N - 1  # Assuming N is a product of two distinct prime numbers (RSA modulus)
    d = 2  # Initial guess for d
    while True:
        if pow(ciphertext, d, N) == original_message:  # Check if decryption matches original message
            end_time = time.time()
            runtime = end_time - start_time
            return d, runtime
        d += 1

def calculate_runtime(N, e, ciphertext, original_message):
    d, runtime = brute_force_private_exponent(N, e, ciphertext, original_message)
    if d is not None and runtime is not None:
        return d, runtime
    else:
        return None, None

