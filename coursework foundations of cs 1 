import math

def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)

def mod_inv(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1

def factor_modulus(N):
    e = 65537  # assume public exponent is known
    for k in range(2, int(math.sqrt(N)) + 1):
        if N % k == 0:
            p, q = k, N // k
            phi = (p - 1) * (q - 1)
            if gcd(e, phi) == 1:
                d = mod_inv(e, phi)
                return p, q, d
    return None

def encrypt(message, public_key):
    N, e = public_key
    return pow(message, e, N)

def decrypt(ciphertext, private_key):
    N, d = private_key
    return pow(ciphertext, d, N)

# Example usage
N = 221
e = 11
ciphertext = 65

# Assuming public key is known
public_key = (N, e)

# Factorizing N to find private key
p, q, d = factor_modulus(N)
if d:
    private_key = (N, d)

    # Decrypting the ciphertext
    decrypted_message = decrypt(ciphertext, private_key)
    print("Decrypted message:", decrypted_message)
else:
    print("Failed to factorize N.")